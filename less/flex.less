// flex.less - a start at CSS classes for using flexbox
//

// ---------------------------------------------------------------------------------------------------------------------
// Object: FLEX CONTAINER
// ---------------------------------------------------------------------------------------------------------------------

// DISPLAY: FLEX
//
// The CSS property 'display' specifies the type of rendering box used for an element.
//
// One of the possible values is 'flex', which directs the element to behave like
// a 'flex container' -- a block element that lays out its content according to
// the flexbox model.
//
// Another possible value is 'inline-flex', which directs the element to behave like
// a 'flex container' -- an inline element that lays out its content according to
// the flexbox model.
//
// @mdn: https://developer.mozilla.org/en-US/docs/Web/CSS/display
.flex {
    display: flex;
}
.flex--inline {
    display: inline-flex;
}
// Common uses
.flex--column {
    flex-direction: column;
}
.flex--row {
    flex-direction: row;
}

// ALIGN-CONTENT
//
// The CSS align-content property aligns a flex container's lines within
// the flex container when there is extra space on the cross-axis.
// This property has no effect on single line flexible boxes.
//
// Initial value:   stretch
// Applies to:      multi-line flex containers
// Formal syntax:   center | flex-end | flex-start | space-around | space-between | stretch
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
.flex--align-content--center {
    align-content: center;
}
.flex--align-content--end {
    align-content: flex-end;
}
.flex--align-content--start {
    align-content: flex-start;
}
.flex--align-content--around {
    align-content: space-around;
}
.flex--align-content--between {
    align-content: space-between;
}
.flex--align-content--stretch {
    align-content: stretch;
}

// ALIGN-ITEMS
//
// The CSS align-items property aligns flex items of the current flex line the
// same way as justify-content but in the perpendicular (cross) direction.
//
// Initial value:   stretch
// Applies to:      flex containers
// Formal syntax:   baseline | center | flex-end | flex-start | stretch
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
.flex--align-items--baseline {
    align-items: baseline;
}
.flex--align-items--center {
    align-items: center;
}
.flex--align-items--end {
    align-items: flex-end;
}
.flex--align-items--start {
    align-items: flex-start;
}
.flex--align-items--stretch {
    align-items: stretch;
}

// FLEX-DIRECTION
//
// The CSS flex-direction property specifies how flex items are placed in the
// flex container defining the main axis and the direction (normal or reversed).

// Note that the values row and row-reverse are affected by the directionality
// of the flex container. If its direction attribute is ltr, row represents the
// horizontal axis oriented from the left to the right, and row-reverse from
// the right to the left; if the direction attribute is rtl, row represents the axis
// oriented from the right to the left, and row-reverse from the left to the right.
//
// Initial value:   row
// Applies to:      flex containers
// Formal syntax:   Formal syntax: row | row-reverse | column | column-reverse
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
.flex--direction--row {
    flex-direction: row;
}
.flex--direction--row-reverse {
    flex-direction: row-reverse;
}
.flex--direction--column {
    flex-direction: column;
}
.flex--direction--column-reverse {
    flex-direction: column-reverse;
}

// FLEX-FLOW
//
// The CSS flex-flow property is a shorthand property for flex-direction and
// flex-wrap individual properties.
//
// Initial value:   the concatenation of the initial values of its longhand properties:
//                      flex-direction: row
//                      flex-wrap:      nowrap
// Applies to:      flex containers
// Formal syntax:   <'flex-direction'> || <'flex-wrap'>
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow
.flex--flow {
    flex-direction: row;
    flex-wrap: nowrap;
}
// Other .flex--flow--XXXXX classes as needed

// FLEX-WRAP
//
// The CSS flex-wrap property specifies whether the children are forced into a
// single line or if the items can be flowed on multiple lines.
//
// Initial value:   nowrap
// Applies to:      flex containers
// Formal syntax:   nowrap | wrap | wrap-reverse
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
.flex--wrap--nowrap {
    flex-wrap: nowrap;
}
.flex--wrap--wrap {
    flex-wrap: wrap;
}
.flex--wrap--wrap-reverse {
    flex-wrap: wrap-reverse;
}

// JUSTIFY-CONTENT
//
// The CSS justify-content property defines how a browser distributes available
// space between and around elements when aligning flex items in the main-axis
// of the current line.
//
// The alignment is done after the lengths and auto margins are applied, meaning
// that, if there is at least one flexible item, with flex-grow different
// than 0, it will have no effect as there won't be any available space.
//
// Initial value:   flex-start
// Applies to:      flex containers
// Formal syntax:   center | flex-end | flex-start | space-around | space-between
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
.flex--justify-content--center {
    justify-content: center;
}
.flex--justify-content--end {
    justify-content: flex-end;
}
.flex--justify-content--start {
    justify-content: flex-start;
}
.flex--justify-content--around {
    justify-content: space-around;
}
.flex--justify-content--between {
    justify-content: space-between;
}

// ---------------------------------------------------------------------------------------------------------------------
// Object: FLEX ITEM
// ---------------------------------------------------------------------------------------------------------------------

// ALIGN-SELF
//
// The align-self CSS property aligns flex items of the current flex line
// overriding the align-items value. If any of the flex item's cross-axis margin
// is set to auto, then align-self is ignored.
//
// Initial value:   auto
// Applies to:      flex items, including in-flow pseudo-elements
// Formal syntax:   auto | baseline | center | flex-end | flex-start | stretch
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/align-self
.flex--align-self--auto {
    align-self: auto;
}
.flex--align-self--baseline {
    align-self: baseline;
}
.flex--align-self--center {
    align-self: center;
}
.flex--align-self--end {
    align-self: flex-end;
}
.flex--align-self--start {
    align-self: flex-start;
}

// FLEX
//
// The flex CSS property is a shorthand property specifying the ability of a
// flex item to alter its dimensions to fill available space. Flex items can
// be stretched to use available space proportional to their flex grow factor
// or their flex shrink factor to prevent overflow.
//
// Initial value:   the concatenation of the initial values of its longhand properties:
//                  flex-grow: 0
//                  flex-shrink: 1
//                  flex-basis: auto
// Applies to:      flex items, including in-flow pseudo-elements
// Use cases:       > to make element that only takes up its allocated width,
//                      like a button, use flex: none, which expands to 0 0 auto.
//                  > to explicitly size an element, use flex: 0 0 size.
//                      For example: flex 0 0 60px.
//                  > to make an element that expands to fill space available,
//                      and shares sharing space equally if there are multiple elements
//                      of this kind within the flow, use flex: auto.
//                      It expands to 1 1 auto.
// Formal syntax:   none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/flex
.flex-item {
    flex: 1 0 auto;
}

// FLEX-BASIS
//
// The CSS flex-basis property specifies the flex basis which is the initial
// main size of a flex item. The property determines the size of the content-box
// unless specified otherwise using box-sizing.

// Initial value:   auto
// Applies to:      flex items, including in-flow pseudo-elements
// Formal syntax:   content | <'width'>
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
.flex-item--basis--auto {
    flex-basis: auto;
}

// FLEX-GROW
//
// The CSS flex-grow property specifies how much the flex item will grow relative
// to the rest of the flex items in the flex container when positive free space
// is distributed.

// Initial value:   0
// Applies to:      flex items, including in-flow pseudo-elements
// Formal syntax:   <number> (Negative numbers are invalid)
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow
.flex-item--grow--none {
    flex-grow: 0;
}
.flex-item--grow--1, .flex-item--grow-one {
    flex-grow: 1;
}
// Other flex-item--grow-XXXXXXX classes as needed.

// FLEX-SHRINK
//
// The CSS flex-shrink property specifies how much the flex item will shrink
// relative to the rest of the flex items in the flex container when negative
// free space is distributed.

// Initial value:   1
// Applies to:      flex items, including in-flow pseudo-elements
// Formal syntax:   <number> (Negative numbers are invalid)
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
.flex-item--shrink--none {
    flex-grow: 0;
}
.flex-item--shrink--1, .flex-item--shrink-one {
    flex-grow: 1;
}
// Other flex-item--shrink-XXXXXXX classes as needed.

// ORDER
//
// The CSS order property specifies the order used to lay out flex items in
// their flex container. Elements are laid out by ascending order of the order
// value. Elements with the same order value are laid out in the order they
// appear in the source code.
//
// Note: order is only meant to affect the visual order, not the logical order,
// or the tab order, of elements. It must not be used on non-visual media such
// as speech.

// Initial value:   0
// Applies to:      flex items and absolutely-positioned flex container children
// Formal syntax:   <integer>
// @mdn:            https://developer.mozilla.org/en-US/docs/Web/CSS/order
